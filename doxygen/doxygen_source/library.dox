/** \page library_page MDI Library

\section library_overview_sec Overview

The MDI Library enables inter-code communication in a manner compliant with the \ref mdi_standard.

The MDI Library currently supports the following communication methods:

  - \ref tcp_launch "TCP"
  - \ref mpi_launch "MPI"



\section library_launching_sec Launching Codes with the MDI Library

Whenever a code is launched as a driver or engine, it must be provided either the \"\c -mdi\" or \"\c --mdi\" runtime option (see \ref mdi_ecosystem for details regarding which codes use the single dash and which codes use the double dash).
The argument for this option is a string, <b> in quotes</b>, consisting of a sequence of options used by the MDI Library.
The following options are available:

  - \c -role

    - \b required: always

    - \b argument: keyword

       - \c DRIVER - The code will run as a driver

       - \c ENGINE - The code will run as an engine

  - \c -name

    - \b required: always

    - \b argument: keyword, with possible values defined in the documentation of each individual driver

  - \c -method

    - \b required: always

    - \b argument: keyword

      - \c TCP - The codes will communicate via the TCP/IP protocol

      - \c MPI - The codes will communicate via MPI using a Multiple Programs, Multiple Data (MPMD) approach

  - \c -hostname

    - \b required: Only if \c method=TCP and \c role=ENGINE

    - \b argument: The hostname of the driver

  - \c -port

    - \b required: Only if \c method=TCP

    - \b argument: The port number over which the driver will listen for connections from the engine(s)

  - \c -ipi

    - This option turns on compatibility mode for i-PI, allowing codes that use MDI for communication to communicate with codes that use i-PI for communication.
    If none of the drivers or engines is using i-PI for communication, this option should not be used, as it disables some of the MDI Library's error checking.

    - \b required: Only if one of the engines or drivers is using i-PI for communication

    - \b argument: None

  - \c -out

    - This option redirects the standard output of the driver or engine to a user-specified file.
    It is primarily intended for use when \c method=MPI (e.g., running all of the codes as part of a single MPMD launch).
    When \c method=MPI, all codes will by default write to the same output file, which typically leads to unreadably mangled output.
    The -out option allows the user to override this behavior, specifying a unique output file for each driver and engine.

    - \b required: Never

    - \b argument: The name of the file to which the output will be redirected

For more information about running or developing codes that use the MDI Library, please see the \ref tutorials "tutorials".

\subsection tcp_launch Using TCP Communication

Launching a driver using TCP communication involves the general format:

    <driver_executable> <driver_options> -mdi "-role DRIVER -name driver -method TCP -port 8021" &

Launching an engine using TCP communication involves the general format:

    <engine_executable> <engine_options> -mdi "-role ENGINE -name my_name -method TCP -port 8021 -hostname localhost" &

The ampersand ("&") causes the code to run in the background, allowing additional drivers and/or engines to be launched from the same terminal or job script.

Note that some codes may use \"\c --mdi\" instead of \"\c -mdi\".

\subsection mpi_launch Using MPI Communication

When using MPI communication, the driver and engines must be launched as part of a single \c mpiexec launch command.
The general format for this is:

    mpiexec -n <driver_nprocs>  <driver_executable>  -mdi "-role DRIVER -name driver -method MPI  -out driver.out"  : \
            -n <engine1_nprocs> <engine1_executable> -mdi "-role ENGINE -name engine1 -method MPI -out engine1.out" : \
            -n <engine2_nprocs> <engine2_executable> -mdi "-role ENGINE -name engine2 -method MPI -out engine2.out"


\section compiliation_sec Compiling the MDI Library

The MDI Library uses CMake to compile.
If you do not already have CMake installed on your machine, please follow the instructions on the <a href="https://cmake.org/">official website</a> to do so.

With CMake installed, you can build the MDI Library as follows:

\code
git clone git@github.com:MolSSI/MDI_Library.git
mkdir MDI_Library/build
cd MDI_Library/build
cmake ..
make
\endcode

By default, the CMake build will compile all necessary wrappers to support linking to C/C++, Fortran, and Python codes.
The build can be restricted to only support a subset of these languages by using the \c -Dlanguage option.
For example, doing the following will compile a build that only supports linking to C/C++ codes:

\code
cmake -Dlanguage=C ..
\endcode

The following is a full list of CMake options:

  - \c -Dlanguage

    - \b argument: keyword

       - \c C - The build will only support C/C++

       - \c Fortran - The build will only support C/C++ and Fortran

       - \c Python - The build will only support C/C++ and Python

  - \c -Dlibtype

    - \b argument: keyword

      - \c SHARED - The build will be compiled as a shared library (default)

      - \c STATIC - The build will be compiled as a static library (NOTE: this option prevents Python codes from using the library)



\section functions_sec MDI Library Functions

MDI function calls are made in a similar style to that of MPI, with MDI_Send and MDI_Recv functions being conceptually analagous to MPI_Send and MPI_Recv, respectively.
The key functions are:

  - MDI_Init(): Initialize the MDI Library

  - MDI_Accept_Communicator(): Accept a new MDI communicator

  - MDI_Send(): Send data through the MDI Library

  - MDI_Recv(): Receive data through the MDI Library

  - MDI_Send_Command(): Send a command through the MDI Library

  - MDI_Recv_Command(): Receive a command through the MDI Library

  - MDI_Conversion_Factor(): Obtain a conversion factor between two units



**/
